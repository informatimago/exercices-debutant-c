-*- mode:org;coding:utf-8 -*-
* Exercices de programmation

Vous pouvez écrire votre solution dans des sous-répertoires de src/.
Des solutions sont proposées dans les sous-répertoires de solutions/.

** Résolution d'une équation du second degré                        :maths:X:

Écrire un programme prenant 3 arguments de type double (virgule
flottante): a, b et c, et imprimant la solution de l'équation du
second degré ax²+bx+c=0

(rappel: il peut y avoir 0, 1 ou 2 solutions, selon le signe du déterminant).

Bonus: quand le déterminant est négatif, calculer et afficher les racines complexes.

*** Exemple:

% equa2 1 2 1
une racine réelle:
x=-1
% equa2 1 2 -1
deux racines réelles:
x1=0.414
x2=−2.414
% equa2 1 0 1
pas de racines réelles.

*** Hint

http://fr.kalkulilo.net/calculatrice-equation-second-degre

** Saisons                                                   :alternatives:X:

Définir une fonction retournant un caractère suivant la saison, selon la table:

| Saison    | Caractère | Description       |
|-----------+-----------+-------------------|
| Hiver     | '*'       | (flocon de neige) |
| Printemps | '&'       | (bourgeon)        |
| Été       | '@'       | (soleil)          |
| Automne   | '%'       | (raisin).         |

Cette fonction prend en argument le numéro du mois (1 a 12), et le
numéro du jour (1 a 31).

On peut supposer que le changement de saison se fait toujours du 20 au
21 du mois.

** Batons                                                        :vecteurs:X:

https://programmingpraxis.com/2016/10/07/sticks/

On donne un paquet de batons, chacun d'une longueur entière.  Deux
batons peuvent être combiné en un seul baton plus long, par un
processus qui coûte la somme des longueurs des deux batons.  Votre but
est construire un seul baton, en combinant tous les batons originaux,
à un coût minimal.

Par exemple, supposons que vous ayez initialement trois batons de
longueurs 1, 2 et 4.  En combinant 2 et 4 à un coût de 6, puis en
combinant le baton résultant au baton de 1 à un coût de 7, ça donne un
coût total de 13.  Mais ce serait mieux de combiner d'abord les batons
1 et 2 à un coût de 3, puis de combiner ce résultat avec le baton de 4
à un coût de 7, pour un coût total de 10.

Votre tâche est d'écrire un programme qui combine un paquet de batons
à un coût minimum.

*** Indice

man 3 qsort

** reverse-file                                                 :fichiers:XX:

Écrire un filtre qui lit des lignes de texte de stdin, et les écrit
sur stdout dans l'ordre inverse: la première ligne est écrite en
dernier, et la dernière ligne est écrite en premier.

Ce programme doit fonctionner avec des lignes jusqu'à 4095 octets de
long, y inclu le terminateur de ligne.
(S'il y a des lignes plus longues, afficher un message d'erreur, et
arrêter avec un status EX_DATA).

Ce programme doit fonctionner avec des flôts d'entrée de taille
jusqu'à 64 GB (ie. qui peuvent être beaucoup plus grands que la taille
de RAM disponible).


*** Example

% export LC_ALL=en_US.UTF-8
% reverse-lines  <<EOF
Bonjour, c'est l'été !
Comment ça va ?
Привет!
EOF
Привет!
Comment ça va ?
Bonjour, c'est l'été !
%

*** Indice

La taille du flôt d'entrée peut être supérieure à la mémoire
disponible.

Il faudra écrire deux algorithmes:
- le premier, capable de travailler avec un tampon en mémoire,
  suffisant pour les petits flôts d'entrée.
- le second, qui s'activera quand le flôt d'entrée s'avèrera trop
  grand, qui utilisera un ou plusieurs fichiers temporaires (jusqu'à
  64 GB de fichier temporaire en tout).

** Conjugaison de verbes du premier et deuxième groupe           :chaines:XX:

Écrire un programme qui prend en argument un verbe du premier ou du
deuxième groupe (en -er ou en -ir), et qui affiche toutes ses conjugaisons.

Optionnellement, on il peut prendre un temps en deuxième argument et
alors il affiche la conjugaison du verbe seulement à ce temps là.

Note: attention à l'encodage des lettres accentuées: il faut tenir
compte du locale (variables d'environnement LC_MESSAGES, LC_CTYPE,
LC_ALL), pour les données suivantes:

- arguments (passés par argv); ils sont tapés sur un terminal lequel 
  les encode selon ses capacités et sa configuration.  Le shell les
  transmet tels-quels, et c'est au programme de les interpréter en
  fonction du locale (LC_CTYPE ou par défaut LC_ALL).

- l'encodage des chaînes contenues dans le programme C dépend du compilateur.

  Voir: https://gcc.gnu.org/onlinedocs/cpp/Character-sets.html

  Avec gcc, on peut donc encoder le source en UTF-8 et supposer que les
  chaînes (char[]) seront encodées en UTF-8 dans l'exécutable.  Il
  faudra alors les convertirs en vecteurs de caractères (wchar_t[])
  avant d'effectuer des traitements sur les caractères, puis les
  reconvertir en séquences d'octets  (char[]) encodées en dans le code
  spécifié par le locale (LC_MESSAGES, LC_CTYPE, LC_ALL)  avant de les
  imprimer.

  Si l'on veut écrire un programme portable (d'un compilateur à
  l'autre), il faut se restreindre au jeu de caractères ASCII (lettres
  non-accentuées), et utiliser des fichiers de resource externes (qui
  peuvent être intégrés dans le source du programme, mais sous forme
  encodée), pour les textes utilisant des caractères hors ASCII.


Cet exercice serait plus facile pour les anglais...


*** Exemples

% conjuguer finir 'Passé composé' 
Passé composé 
    j'ai fini 
    tu as fini 
    il a fini 
    nous avons fini 
    vous avez fini 
    ils ont fini

% conjuguer manger
Indicatif Présent
    je mange
    tu manges
    il mange
    nous mangeons
    vous mangez
    ils mangent
Passé composé
    j'ai mangé
    tu as mangé
    il a mangé
    nous avons mangé
    vous avez mangé
    ils ont mangé
Imparfait
    je mangeais
    tu mangeais
    il mangeait
    nous mangions
    vous mangiez
    ils mangeaient
Plus-que-parfait
    j'avais mangé
    tu avais mangé
    il avait mangé
    nous avions mangé
    vous aviez mangé
    ils avaient mangé
Passé simple
    je mangeai
    tu mangeas
    il mangea
    nous mangeâmes
    vous mangeâtes
    ils mangèrent
Passé antérieur
    j'eus mangé
    tu eus mangé
    il eut mangé
    nous eûmes mangé
    vous eûtes mangé
    ils eurent mangé
Futur simple
    je mangerai
    tu mangeras
    il mangera
    nous mangerons
    vous mangerez
    ils mangeront
Futur antérieur
    j'aurai mangé
    tu auras mangé
    il aura mangé
    nous aurons mangé
    vous aurez mangé
    ils auront mangé
Conditionnel Présent
    je mangerais
    tu mangerais
    il mangerait
    nous mangerions
    vous mangeriez
    ils mangeraient
Conditionnel Passé
    j'aurais mangé
    tu aurais mangé
    il aurait mangé
    nous aurions mangé
    vous auriez mangé
    ils auraient mangé
Subjonctif Présent
    que je mange
    que tu manges
    qu'il mange
    que nous mangions
    que vous mangiez
    qu'ils mangent
Subjonctif Passé
    que j'aie mangé
    que tu aies mangé
    qu'il ait mangé
    que nous ayons mangé
    que vous ayez mangé
    qu'ils aient mangé
Imparfait du Subjonctif
    que je mangeasse
    que tu mangeasses
    qu'il mangeât
    que nous mangeassions
    que vous mangeassiez
    qu'ils mangeassent
Plus-que-parfait du Subjonctif
    que j'eusse mangé
    que tu eusses mangé
    qu'il eût mangé
    que nous eussions mangé
    que vous eussiez mangé
    qu'ils eussent mangé
Impératif Présent
    mange
    mangeons
    mangez
Impératif Passé
    aie mangé
    ayons mangé
    ayez mangé
Infinitif Présent
    manger
Infinitif Passé
    avoir mangé
Participe Présent
    mangeant
Participe Passé
    mangé
    ayant mangé
Gérondif Présent
    en mangeant
Gérondif Passé
    en ayant mangé

** reverse-lines                                      :encodage:fichiers:XXX:

Écrire un filtre qui lit des lignes de stdin, et qui les écrits sur
stdout en les inversant (en écrivant le premier caractère de la ligne
en dernier, et le dernier caractère de la ligne en premier).

Ce programme doit fonctionner avec des lignes jusqu'à 4095 octets de
long, y inclu le terminateur de ligne.  (S'il y a des lignes plus
longues, afficher un message d'erreur, et arrêter avec un status
EX_DATA).

Ce programme doit fonctionner avec des flôts d'entrée de taille
illimitée.

*** Première partie                                                      :XX:

Écrire une première version, nommée reverse-lines-by-byte, qui
travaille avec des char (ou unsigned char), en inversant la ligne
octet par octet.

Le tester sur le fichier input.txt (comparer le résultat avec
expected-result.txt).

Lire:
https://fr.wikipedia.org/wiki/UTF-8
https://fr.wikipedia.org/wiki/Unicode


*** Deuxième partie                                                     :XXX:

Faire une copie du programme reverse-lines-by-byte nommée
reverse-lines-by-character, et la modifier pour effectuer le
traitement (inversion de l'ordre) caractère par caractère, au lieu de
procéder octet par octet, après décodage des octets en caractères, et
avant ré-encodage des caractères en octets.  L'encodage est spécifié
par les variables d'environnement LC_CTYPE ou à défaut, LC_ALL, via le
locale(3) (man 3 setlocale).

Visualiser le fichier résultat dans un éditeur unicode.  Noter que
certains mots ne sont pas rendu correctement lorsqu'ils sont inversés?
Que se passe-t'il?  Comment pourrions nous procéder pour obtenir un
meilleur résultat inversé?


*** Example

% export LC_ALL=en_US.UTF-8
% reverse-lines-by-character  <<EOF
Bonjour, c'est l'été !
Comment ça va ?
Привет!
EOF
! été'l tse'c ,ruojnoB
? av aç tnemmoC
!тевирП
%
*** Hint

man 3 multibyte
** Trois exercices de manipulation de liste                       :listes:XX:

Implanter trois fonctions pour manipuler des listes d'entier:

- une fonction qui prend une liste d'entier, et retourne un nouvelle liste 
  d'entier avec tous les entier impair enlevés.

- une fonction qui enlève d'une liste chaînée tous les n-ième éléments.

- une fonction qui échange les deux moitiés d'une liste; si le nombre 
  d'éléments est impair, celui du millieu doit aller avec la seconde
  moitié de la liste.


Les deux dernières fonctions peuvent modifier la liste originale.


*** Exemple

% ./list
(0 1 2 3 4 5 6 7 8 9)
with odd number removed: (0 2 4 6 8)

(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)
with every other element removed: (0 2 4 6 8 10 12 14 16 18)

(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)
with every third element removed: (0 1 3 4 6 7 9 10 12 13 15 16 18 19)

List ()
with the two half swapped: ()

List (1)
with the two half swapped: (1)

List (1 2)
with the two half swapped: (2 1)

List (1 2 3)
with the two half swapped: (2 3 1)

List (1 2 3 4)
with the two half swapped: (3 4 1 2)

List (1 2 3 4 5)
with the two half swapped: (3 4 5 1 2)

List (1 2 3 4 5 6)
with the two half swapped: (4 5 6 1 2 3)

List (0 1 2 3 4 5 6 7 8 9)
with the two half swapped: (5 6 7 8 9 0 1 2 3 4)

List (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)
with the two half swapped: (10 11 12 13 14 15 16 17 18 19 0 1 2 3 4 5 6 7 8 9)

